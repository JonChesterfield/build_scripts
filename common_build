#!/bin/bash
set -x
set -e
set -o pipefail

# Default is everything in home
BUILDROOT=$HOME

ARGSDIR=$SDIR
ARGBDIR=$BDIR
ARGIDIR=$IDIR

SDIR=$BUILDROOT/$ARGSDIR
BDIR=$BUILDROOT/$ARGBDIR
IDIR=$BUILDROOT/$ARGIDIR


# If scratch exists, put the build files there
INSCRATCH=false
if [[ -d /scratch/$USER ]]
then
    INSCRATCH=true
    BUILDROOT=/scratch/$USER

    BDIR=$BUILDROOT/$ARGBDIR
    # IDIR=$BUILDROOT/$IDIR # undecided
fi


# If this directory exists, put everything there instead
INWORK=false
if [[ -d /work/$USER ]]
then
    echo "Detected /work dir, using that with symlinks to $HOME"
    INWORK=true
    INSCRATCH=false
    BUILDROOT=/work/$USER

    SDIR=$BUILDROOT/$ARGSDIR
    BDIR=$BUILDROOT/$ARGBDIR
    IDIR=$BUILDROOT/$ARGIDIR
fi



echo "Building: SDIR = $SDIR"
echo "Building: BDIR = $BDIR"
echo "Building: IDIR = $IDIR"
echo "Building: $CMAKE_BUILD_TYPE"

BUILDTOOL="make -j`nproc`"
BUILDTOOL="ninja"

if [[ -d "$SDIR" ]]
then
    echo "Using existing llvm project"
else
    echo "Clone llvm into $SDIR"
    git clone https://github.com/llvm/llvm-project.git $SDIR
fi

cd $SDIR

if [[ -d "ROCT-Thunk-Interface" ]]
then
    echo "Using existing roct"
else
    git clone https://github.com/RadeonOpenCompute/ROCT-Thunk-Interface.git -b roc-5.2.x
fi

if [[ -d "ROCR-Runtime" ]]
then
    echo "Using existing rocr"
else
    git clone https://github.com/RadeonOpenCompute/ROCR-Runtime.git -b rocm-5.2.x
    # This can be disabled by environment variable, but LLVM's testing does not pass that
    # environment variable along. So clobber it in the source directly.
    sed -i 's/os::GetEnvVar("HSA_IGNORE_SRAMECC_MISREPORT")/"1"/' ROCR-Runtime/src/core/util/flag.h

    # patch enum
    cd ROCR-Runtime
    cat <<'EOF' | git apply
diff --git a/src/inc/hsa.h b/src/inc/hsa.h
index fe1facc..9d6cf04 100644
--- a/src/inc/hsa.h
+++ b/src/inc/hsa.h
@@ -1012,7 +1012,17 @@ typedef enum {
    * Minor version of the HSA runtime specification supported by the
    * agent. The type of this attribute is uint16_t.
    */
-  HSA_AGENT_INFO_VERSION_MINOR = 22
+  HSA_AGENT_INFO_VERSION_MINOR = 22,
+
+  /**
+   * This enum does not have a fixed underlying type, thus in C++ post D2338:
+   * If the enumeration type does not have a fixed underlying type, the value is
+   * unchanged if the original value is within the range of the enumeration
+   * values (9.7.1 [dcl.enum]), and otherwise, the behavior is
+   * undefined.
+   * Thus increase the range of this enum to encompass vendor extensions.
+   */
+  HSA_AGENT_INFO_UNUSED_WORKAROUND_D2338 = INT32_MAX
 
 } hsa_agent_info_t;
 
EOF
    cd --
fi

if [[ -d "ROCm-Device-Libs" ]]
then
    echo "Using existing device libs"
else
    # fractionally better odds of amd-stg-open building with trunk, but means the sed hacks
    # below will rot faster

    git clone https://github.com/RadeonOpenCompute/ROCm-Device-Libs.git -b amd-stg-open
    #sed -i 's$add_subdirectory(opencl)$# add_subdirectory(opencl)$g' ROCm-Device-Libs/CMakeLists.txt
    #sed -i 's$sys::fs::F_None$sys::fs::OF_None$' ROCm-Device-Libs/utils/prepare-builtins/prepare-builtins.cpp
    rm -f ROCm-Device-Libs/ockl/src/dots.cl # doesn't build

    rm -f ROCm-Device-Libs/ockl/src/gaaf.cl # doesn't build

    #rm -rf ROCm-Device-Libs/hc # several files fail with error: Opaque pointers are only supported in -opaque-pointers mode

fi

if [[ -d "dynamic_hsa" ]]
then
    echo "Using existing dynamic hsa"
else
    git clone https://github.com/JonChesterfield/dynamic_hsa.git
fi


# amd-stg-open cmake assumes it is called this and up one level
# hopefully no longer true as it's annoying to set up

cd ..
# ln -sf llvm-project/ROCm-Device-Libs rocm-device-libs
cd -


if [ "$INSCRATCH" = true ]
then
    echo "Hard reset some links in $HOME to $BUILDROOT"
    for DIR in $BDIR; do
        rm -rf $HOME/$(basename $DIR)
        ln -sf $DIR $HOME/$(basename $DIR)
    done
fi

if [ "$INWORK" = true ]
then
    echo "Hard reset links in $HOME to $BUILDROOT"
    for DIR in $SDIR $BDIR $IDIR; do
        rm -rf $HOME/$(basename $DIR)
        ln -sf $DIR $HOME/$(basename $DIR)
    done
fi

echo "Clean out build and install directories"
mkdir -p $BDIR
rm -rf $BDIR/*
mkdir -p $IDIR
rm -rf $IDIR/*

# Aomp tests assume a script in ~ this dir which returns a string for the gfx
mkdir -p $IDIR/bin
echo '#!/bin/bash' > $IDIR/bin/mygpu
echo 'echo $('$IDIR'/bin/amdgpu-arch | uniq)' >> $IDIR/bin/mygpu
chmod +x $IDIR/bin/mygpu

# todo: actually compute link jobs, possibly based on available ram
#  -DLLVM_PARALLEL_LINK_JOBS=$(( ($(nproc) + 7)/8 ))
CMAKE_COMMON="-DCMAKE_C_COMPILER=`which clang` -DCMAKE_CXX_COMPILER=`which clang++` -DCMAKE_INSTALL_PREFIX=$IDIR -DOPENMP_ENABLE_LIBOMPTARGET_PROFILING=OFF -DLLVM_ENABLE_ASSERTIONS=On -DCMAKE_VERBOSE_MAKEFILE=1 "



cd $BDIR 

# LLvm time
rm -rf llvm && mkdir llvm && cd llvm

# Create a HSA instance of sorts
mkdir -p include
cp -r $SDIR/dynamic_hsa/include/* include/

# libc checks CMAKE_INSTALL_PREFIX looking for hsa, pretend there is one there
#cd $IDIR
#mkdir -p llvm
#mkdir -p lib
#mkdir -p lib/cmake
#mkdir -p lib/cmake/hsa-runtime64
#cp -r $SDIR/dynamic_hsa/lib/cmake/hsa-runtime64/* lib/cmake/hsa-runtime64/
#cd $BDIR/llvm

# -DLIBOMPTARGET_BUILD_NVPTX_BCLIB=TRUE # useful on wx, breaks build on r7

if [[ -d "/usr/local/cuda-11" ]]
then
    echo "Got a cuda-11 install on disk, using it"
    # Doesn't suffice to hit LIBOMPTARGET_DEP_CUDA_FOUND, a curse on cmake
    CUDA="-DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11"
else
    CUDA=""
fi

# force dlopen hsa because it's more likely to break
# force dlopen cuda because cuda autodetection is broken and because
# forcing it on is part of the dance to enable tests
# dlopen subset of hsa fails to build printf (which uses hsa.hpp)
#       -DLIBOMPTARGET_ENABLE_DEBUG=ON \
# enable debug may be making all the filecheck tests fail, annoyingly
#      -DLIBOMPTARGET_FORCE_DLOPEN_LIBCUDA=TRUE \
#      -DDEVICELIBS_ROOT=$SDIR/ROCm-Device-Libs probably don't need this

cmake $SDIR/llvm $CMAKE_COMMON $CMAKE_BUILD_TYPE \
      -DLLVM_ENABLE_PROJECTS="clang;lld;compiler-rt" \
      -DLLVM_ENABLE_RUNTIMES="libc;openmp" \
      -DLLVM_ENABLE_ZLIB=OFF \
      -DLLVM_ENABLE_TERMINFO=OFF \
      -DOPENMP_ENABLE_LIBOMPTARGET_HSA=TRUE \
      -DENABLE_AMDGPU_ARCH_TOOL=TRUE \
      $CUDA \
      -DLIBOMPTARGET_FORCE_DLOPEN_LIBCUDA=FALSE \
      -DLIBOMPTARGET_FORCE_DLOPEN_LIBHSA=FALSE \
      -DLIBOMPTARGET_BUILD_NVPTX_BCLIB=TRUE \
      -DLIBOMPTARGET_BUILD_AMDGPU_BCLIB=TRUE \
      -DLIBOMPTARGET_BUILD_CUDA_PLUGIN=TRUE \
      -DLIBOMPTARGET_BUILD_AMDGPU_PLUGIN=TRUE \
      -DLIBOMPTARGET_FORCE_AMDGPU_TESTS=TRUE \
      -DLLVM_LIBC_FULL_BUILD=ON \
      -DLIBC_GPU_BUILD=ON \
      -DLIBC_GPU_ARCHITECTURES=gfx1010 \
      -DLIBC_GPU_TEST_ARCHITECTURE=gfx1010 \
      -DLIBC_GPU_LOADER_EXECUTABLE=$HOME/GPU/amdhsa_loader \
      -GNinja

$BUILDTOOL

# make check is currently raising 'user defined signal 2' and killing everything
set +e
# $BUILDTOOL check-all 
set -e
$BUILDTOOL install # often want install to succeed even if tests dont

# HSA contains cmake for trap_handler which doesn't honour compiler flags and expects
# a prefix path with /llvm on it, despite llvm not installing under a tree that looks like that
# Also it looks like it has a copy/paste bug for the find_package for clang. Trying PATH.

export PATH=$IDIR/bin:$PATH

echo "Try to build ROCT"
cd $BDIR
rm -rf roct && mkdir roct && cd roct
cmake $SDIR/ROCT-Thunk-Interface/ $CMAKE_COMMON $CMAKE_BUILD_TYPE -DBUILD_SHARED_LIBS=OFF
make -j `nproc` && make -j `nproc` install

# cmake doesn't build both static and shared but could do so separately
# there's some commented out logic below for putting a link to the .so where
# tests can find it which we don't want to do with a static build
# clang doesn't work with cmake
echo "Try to build ROCR"
cd $BDIR
rm -rf rocr && mkdir rocr && cd rocr
#  -DCMAKE_C_COMPILER="$IDIR/bin/clang" -DCMAKE_CXX_COMPILER="$IDIR/bin/clang++"
cmake $SDIR/ROCR-Runtime/src/ -DIMAGE_SUPPORT=OFF $CMAKE_COMMON $CMAKE_BUILD_TYPE -DBUILD_SHARED_LIBS=ON
make -j `nproc` && make -j `nproc` install


# HSA has just put dangling links in the build tree. That upsets anything that tries to use it.
rm -f $BDIR/llvm/lib/libhsa-runtime64*
cd $BDIR/llvm/lib
ln -s $IDIR/lib/libhsa-runtime64.so.1 $BDIR/llvm/lib/libhsa-runtime64.so
cd -

# libc hardcodes the wrong path to hsa, try to hack around that
cd $IDIR/include/hsa
mkdir hsa
cd hsa
ln -s ../*.h .


# libomptarget tests no longer use LD_LIBRARY_PATH, put a link to libhsa next to the plugin

FROM=$(find $BDIR -iname libhsa-runtime64.so)
LIBOMP=$(find $BDIR -iname libomptarget.rtl.amdgpu.so)
if [[ -e $LIBOMP ]]
then
echo "Link hsa $FROM to dirname $LIBOMP"
TO=$(dirname $LIBOMP)
ln -sf $FROM $TO
else
echo "Can't find libomptarget.rtl.amdgpu.so, don't try to ln hsa"
fi


# device libs is not building again. to hell with it

mkdir -p $IDIR/amdgcn/bitcode
touch $IDIR/amdgcn/bitcode/opencl.bc

exit 0

# device libs needs a recent llvm and doesn't honour cmake configuration
# it will use whatever clang find_package returns, and one place that looks is the path
cd $BDIR
rm -rf devlibs && mkdir devlibs && cd devlibs
export PATH=$IDIR/bin:$PATH
cmake $SDIR/ROCm-Device-Libs $CMAKE_COMMON $CMAKE_BUILD_TYPE -GNinja
$BUILDTOOL && $BUILDTOOL install


# clang doesn't handle ABI breaks in device libs well and rocm doesn't bother with
# backwards compatibility, may need stuff like:
# touch /opt/rocm/lib/opencl.bc
# or
# ln -s $HOME/llvm-install/amdgcn /opt/rocm/amdgcn


